import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/@stdlib/utils/define-property/lib/define_property.js
var require_define_property = __commonJS({
  "node_modules/@stdlib/utils/define-property/lib/define_property.js"(exports, module) {
    "use strict";
    var main = typeof Object.defineProperty === "function" ? Object.defineProperty : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/utils/define-property/lib/has_define_property_support.js
var require_has_define_property_support = __commonJS({
  "node_modules/@stdlib/utils/define-property/lib/has_define_property_support.js"(exports, module) {
    "use strict";
    var defineProperty = require_define_property();
    function hasDefinePropertySupport() {
      try {
        defineProperty({}, "x", {});
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = hasDefinePropertySupport;
  }
});

// node_modules/@stdlib/utils/define-property/lib/builtin.js
var require_builtin = __commonJS({
  "node_modules/@stdlib/utils/define-property/lib/builtin.js"(exports, module) {
    "use strict";
    var defineProperty = Object.defineProperty;
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/is_number.js
var require_is_number = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/is_number.js"(exports, module) {
    "use strict";
    function isNumber(value) {
      return typeof value === "number";
    }
    module.exports = isNumber;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/zero_pad.js
var require_zero_pad = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/zero_pad.js"(exports, module) {
    "use strict";
    function startsWithMinus(str) {
      return str[0] === "-";
    }
    function zeros(n) {
      var out = "";
      var i;
      for (i = 0; i < n; i++) {
        out += "0";
      }
      return out;
    }
    function zeroPad(str, width, right) {
      var negative = false;
      var pad = width - str.length;
      if (pad < 0) {
        return str;
      }
      if (startsWithMinus(str)) {
        negative = true;
        str = str.substr(1);
      }
      str = right ? str + zeros(pad) : zeros(pad) + str;
      if (negative) {
        str = "-" + str;
      }
      return str;
    }
    module.exports = zeroPad;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/format_integer.js
var require_format_integer = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/format_integer.js"(exports, module) {
    "use strict";
    var isNumber = require_is_number();
    var zeroPad = require_zero_pad();
    var lowercase = String.prototype.toLowerCase;
    var uppercase = String.prototype.toUpperCase;
    function formatInteger(token) {
      var base;
      var out;
      var i;
      switch (token.specifier) {
        case "b":
          base = 2;
          break;
        case "o":
          base = 8;
          break;
        case "x":
        case "X":
          base = 16;
          break;
        case "d":
        case "i":
        case "u":
        default:
          base = 10;
          break;
      }
      out = token.arg;
      i = parseInt(out, 10);
      if (!isFinite(i)) {
        if (!isNumber(out)) {
          throw new Error("invalid integer. Value: " + out);
        }
        i = 0;
      }
      if (i < 0 && (token.specifier === "u" || base !== 10)) {
        i = 4294967295 + i + 1;
      }
      if (i < 0) {
        out = (-i).toString(base);
        if (token.precision) {
          out = zeroPad(out, token.precision, token.padRight);
        }
        out = "-" + out;
      } else {
        out = i.toString(base);
        if (!i && !token.precision) {
          out = "";
        } else if (token.precision) {
          out = zeroPad(out, token.precision, token.padRight);
        }
        if (token.sign) {
          out = token.sign + out;
        }
      }
      if (base === 16) {
        if (token.alternate) {
          out = "0x" + out;
        }
        out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);
      }
      if (base === 8) {
        if (token.alternate && out.charAt(0) !== "0") {
          out = "0" + out;
        }
      }
      return out;
    }
    module.exports = formatInteger;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/is_string.js
var require_is_string = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/is_string.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/format_double.js
var require_format_double = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/format_double.js"(exports, module) {
    "use strict";
    var isNumber = require_is_number();
    var abs = Math.abs;
    var lowercase = String.prototype.toLowerCase;
    var uppercase = String.prototype.toUpperCase;
    var replace = String.prototype.replace;
    var RE_EXP_POS_DIGITS = /e\+(\d)$/;
    var RE_EXP_NEG_DIGITS = /e-(\d)$/;
    var RE_ONLY_DIGITS = /^(\d+)$/;
    var RE_DIGITS_BEFORE_EXP = /^(\d+)e/;
    var RE_TRAILING_PERIOD_ZERO = /\.0$/;
    var RE_PERIOD_ZERO_EXP = /\.0*e/;
    var RE_ZERO_BEFORE_EXP = /(\..*[^0])0*e/;
    function formatDouble(token) {
      var digits;
      var out;
      var f = parseFloat(token.arg);
      if (!isFinite(f)) {
        if (!isNumber(token.arg)) {
          throw new Error("invalid floating-point number. Value: " + out);
        }
        f = token.arg;
      }
      switch (token.specifier) {
        case "e":
        case "E":
          out = f.toExponential(token.precision);
          break;
        case "f":
        case "F":
          out = f.toFixed(token.precision);
          break;
        case "g":
        case "G":
          if (abs(f) < 1e-4) {
            digits = token.precision;
            if (digits > 0) {
              digits -= 1;
            }
            out = f.toExponential(digits);
          } else {
            out = f.toPrecision(token.precision);
          }
          if (!token.alternate) {
            out = replace.call(out, RE_ZERO_BEFORE_EXP, "$1e");
            out = replace.call(out, RE_PERIOD_ZERO_EXP, "e");
            out = replace.call(out, RE_TRAILING_PERIOD_ZERO, "");
          }
          break;
        default:
          throw new Error("invalid double notation. Value: " + token.specifier);
      }
      out = replace.call(out, RE_EXP_POS_DIGITS, "e+0$1");
      out = replace.call(out, RE_EXP_NEG_DIGITS, "e-0$1");
      if (token.alternate) {
        out = replace.call(out, RE_ONLY_DIGITS, "$1.");
        out = replace.call(out, RE_DIGITS_BEFORE_EXP, "$1.e");
      }
      if (f >= 0 && token.sign) {
        out = token.sign + out;
      }
      out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);
      return out;
    }
    module.exports = formatDouble;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/space_pad.js
var require_space_pad = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/space_pad.js"(exports, module) {
    "use strict";
    function spaces(n) {
      var out = "";
      var i;
      for (i = 0; i < n; i++) {
        out += " ";
      }
      return out;
    }
    function spacePad(str, width, right) {
      var pad = width - str.length;
      if (pad < 0) {
        return str;
      }
      str = right ? str + spaces(pad) : spaces(pad) + str;
      return str;
    }
    module.exports = spacePad;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/main.js
var require_main = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/main.js"(exports, module) {
    "use strict";
    var formatInteger = require_format_integer();
    var isString = require_is_string();
    var formatDouble = require_format_double();
    var spacePad = require_space_pad();
    var zeroPad = require_zero_pad();
    var fromCharCode = String.fromCharCode;
    var isArray = Array.isArray;
    function isnan(value) {
      return value !== value;
    }
    function initialize(token) {
      var out = {};
      out.specifier = token.specifier;
      out.precision = token.precision === void 0 ? 1 : token.precision;
      out.width = token.width;
      out.flags = token.flags || "";
      out.mapping = token.mapping;
      return out;
    }
    function formatInterpolate(tokens) {
      var hasPeriod;
      var flags;
      var token;
      var flag;
      var num;
      var out;
      var pos;
      var i;
      var j;
      if (!isArray(tokens)) {
        throw new TypeError("invalid argument. First argument must be an array. Value: `" + tokens + "`.");
      }
      out = "";
      pos = 1;
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        if (isString(token)) {
          out += token;
        } else {
          hasPeriod = token.precision !== void 0;
          token = initialize(token);
          if (!token.specifier) {
            throw new TypeError("invalid argument. Token is missing `specifier` property. Index: `" + i + "`. Value: `" + token + "`.");
          }
          if (token.mapping) {
            pos = token.mapping;
          }
          flags = token.flags;
          for (j = 0; j < flags.length; j++) {
            flag = flags.charAt(j);
            switch (flag) {
              case " ":
                token.sign = " ";
                break;
              case "+":
                token.sign = "+";
                break;
              case "-":
                token.padRight = true;
                token.padZeros = false;
                break;
              case "0":
                token.padZeros = flags.indexOf("-") < 0;
                break;
              case "#":
                token.alternate = true;
                break;
              default:
                throw new Error("invalid flag: " + flag);
            }
          }
          if (token.width === "*") {
            token.width = parseInt(arguments[pos], 10);
            pos += 1;
            if (isnan(token.width)) {
              throw new TypeError("the argument for * width at position " + pos + " is not a number. Value: `" + token.width + "`.");
            }
            if (token.width < 0) {
              token.padRight = true;
              token.width = -token.width;
            }
          }
          if (hasPeriod) {
            if (token.precision === "*") {
              token.precision = parseInt(arguments[pos], 10);
              pos += 1;
              if (isnan(token.precision)) {
                throw new TypeError("the argument for * precision at position " + pos + " is not a number. Value: `" + token.precision + "`.");
              }
              if (token.precision < 0) {
                token.precision = 1;
                hasPeriod = false;
              }
            }
          }
          token.arg = arguments[pos];
          switch (token.specifier) {
            case "b":
            case "o":
            case "x":
            case "X":
            case "d":
            case "i":
            case "u":
              if (hasPeriod) {
                token.padZeros = false;
              }
              token.arg = formatInteger(token);
              break;
            case "s":
              token.maxWidth = hasPeriod ? token.precision : -1;
              token.arg = String(token.arg);
              break;
            case "c":
              if (!isnan(token.arg)) {
                num = parseInt(token.arg, 10);
                if (num < 0 || num > 127) {
                  throw new Error("invalid character code. Value: " + token.arg);
                }
                token.arg = isnan(num) ? String(token.arg) : fromCharCode(num);
              }
              break;
            case "e":
            case "E":
            case "f":
            case "F":
            case "g":
            case "G":
              if (!hasPeriod) {
                token.precision = 6;
              }
              token.arg = formatDouble(token);
              break;
            default:
              throw new Error("invalid specifier: " + token.specifier);
          }
          if (token.maxWidth >= 0 && token.arg.length > token.maxWidth) {
            token.arg = token.arg.substring(0, token.maxWidth);
          }
          if (token.padZeros) {
            token.arg = zeroPad(token.arg, token.width || token.precision, token.padRight);
          } else if (token.width) {
            token.arg = spacePad(token.arg, token.width, token.padRight);
          }
          out += token.arg || "";
          pos += 1;
        }
      }
      return out;
    }
    module.exports = formatInterpolate;
  }
});

// node_modules/@stdlib/string/base/format-interpolate/lib/index.js
var require_lib = __commonJS({
  "node_modules/@stdlib/string/base/format-interpolate/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main();
    module.exports = main;
  }
});

// node_modules/@stdlib/string/base/format-tokenize/lib/main.js
var require_main2 = __commonJS({
  "node_modules/@stdlib/string/base/format-tokenize/lib/main.js"(exports, module) {
    "use strict";
    var RE = /%(?:([1-9]\d*)\$)?([0 +\-#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([%A-Za-z])/g;
    function parse(match) {
      var token = {
        "mapping": match[1] ? parseInt(match[1], 10) : void 0,
        "flags": match[2],
        "width": match[3],
        "precision": match[5],
        "specifier": match[6]
      };
      if (match[4] === "." && match[5] === void 0) {
        token.precision = "1";
      }
      return token;
    }
    function formatTokenize(str) {
      var content;
      var tokens;
      var match;
      var prev;
      tokens = [];
      prev = 0;
      match = RE.exec(str);
      while (match) {
        content = str.slice(prev, RE.lastIndex - match[0].length);
        if (content.length) {
          tokens.push(content);
        }
        tokens.push(parse(match));
        prev = RE.lastIndex;
        match = RE.exec(str);
      }
      content = str.slice(prev);
      if (content.length) {
        tokens.push(content);
      }
      return tokens;
    }
    module.exports = formatTokenize;
  }
});

// node_modules/@stdlib/string/base/format-tokenize/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@stdlib/string/base/format-tokenize/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main2();
    module.exports = main;
  }
});

// node_modules/@stdlib/string/format/lib/is_string.js
var require_is_string2 = __commonJS({
  "node_modules/@stdlib/string/format/lib/is_string.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/string/format/lib/main.js
var require_main3 = __commonJS({
  "node_modules/@stdlib/string/format/lib/main.js"(exports, module) {
    "use strict";
    var interpolate = require_lib();
    var tokenize = require_lib2();
    var isString = require_is_string2();
    function format(str) {
      var args;
      var i;
      if (!isString(str)) {
        throw new TypeError(format("invalid argument. First argument must be a string. Value: `%s`.", str));
      }
      args = [tokenize(str)];
      for (i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      return interpolate.apply(null, args);
    }
    module.exports = format;
  }
});

// node_modules/@stdlib/string/format/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@stdlib/string/format/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main3();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils/define-property/lib/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/@stdlib/utils/define-property/lib/polyfill.js"(exports, module) {
    "use strict";
    var format = require_lib3();
    var objectProtoype = Object.prototype;
    var toStr = objectProtoype.toString;
    var defineGetter = objectProtoype.__defineGetter__;
    var defineSetter = objectProtoype.__defineSetter__;
    var lookupGetter = objectProtoype.__lookupGetter__;
    var lookupSetter = objectProtoype.__lookupSetter__;
    function defineProperty(obj, prop, descriptor) {
      var prototype;
      var hasValue;
      var hasGet;
      var hasSet;
      if (typeof obj !== "object" || obj === null || toStr.call(obj) === "[object Array]") {
        throw new TypeError(format("invalid argument. First argument must be an object. Value: `%s`.", obj));
      }
      if (typeof descriptor !== "object" || descriptor === null || toStr.call(descriptor) === "[object Array]") {
        throw new TypeError(format("invalid argument. Property descriptor must be an object. Value: `%s`.", descriptor));
      }
      hasValue = "value" in descriptor;
      if (hasValue) {
        if (lookupGetter.call(obj, prop) || lookupSetter.call(obj, prop)) {
          prototype = obj.__proto__;
          obj.__proto__ = objectProtoype;
          delete obj[prop];
          obj[prop] = descriptor.value;
          obj.__proto__ = prototype;
        } else {
          obj[prop] = descriptor.value;
        }
      }
      hasGet = "get" in descriptor;
      hasSet = "set" in descriptor;
      if (hasValue && (hasGet || hasSet)) {
        throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");
      }
      if (hasGet && defineGetter) {
        defineGetter.call(obj, prop, descriptor.get);
      }
      if (hasSet && defineSetter) {
        defineSetter.call(obj, prop, descriptor.set);
      }
      return obj;
    }
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils/define-property/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@stdlib/utils/define-property/lib/index.js"(exports, module) {
    "use strict";
    var hasDefinePropertySupport = require_has_define_property_support();
    var builtin = require_builtin();
    var polyfill = require_polyfill();
    var defineProperty;
    if (hasDefinePropertySupport()) {
      defineProperty = builtin;
    } else {
      defineProperty = polyfill;
    }
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils/define-nonenumerable-read-only-property/lib/main.js
var require_main4 = __commonJS({
  "node_modules/@stdlib/utils/define-nonenumerable-read-only-property/lib/main.js"(exports, module) {
    "use strict";
    var defineProperty = require_lib4();
    function setNonEnumerableReadOnly(obj, prop, value) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "writable": false,
        "value": value
      });
    }
    module.exports = setNonEnumerableReadOnly;
  }
});

// node_modules/@stdlib/utils/define-nonenumerable-read-only-property/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/@stdlib/utils/define-nonenumerable-read-only-property/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main4();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert/is-string/lib/primitive.js
var require_primitive = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/primitive.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert/has-symbol-support/lib/main.js
var require_main5 = __commonJS({
  "node_modules/@stdlib/assert/has-symbol-support/lib/main.js"(exports, module) {
    "use strict";
    function hasSymbolSupport() {
      return typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    }
    module.exports = hasSymbolSupport;
  }
});

// node_modules/@stdlib/assert/has-symbol-support/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@stdlib/assert/has-symbol-support/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main5();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert/has-tostringtag-support/lib/main.js
var require_main6 = __commonJS({
  "node_modules/@stdlib/assert/has-tostringtag-support/lib/main.js"(exports, module) {
    "use strict";
    var hasSymbols = require_lib6();
    var FLG = hasSymbols();
    function hasToStringTagSupport() {
      return FLG && typeof Symbol.toStringTag === "symbol";
    }
    module.exports = hasToStringTagSupport;
  }
});

// node_modules/@stdlib/assert/has-tostringtag-support/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/@stdlib/assert/has-tostringtag-support/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main6();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils/native-class/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/@stdlib/utils/native-class/lib/tostring.js"(exports, module) {
    "use strict";
    var toStr = Object.prototype.toString;
    module.exports = toStr;
  }
});

// node_modules/@stdlib/utils/native-class/lib/main.js
var require_main7 = __commonJS({
  "node_modules/@stdlib/utils/native-class/lib/main.js"(exports, module) {
    "use strict";
    var toStr = require_tostring();
    function nativeClass(v) {
      return toStr.call(v);
    }
    module.exports = nativeClass;
  }
});

// node_modules/@stdlib/assert/has-own-property/lib/main.js
var require_main8 = __commonJS({
  "node_modules/@stdlib/assert/has-own-property/lib/main.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    function hasOwnProp(value, property) {
      if (value === void 0 || value === null) {
        return false;
      }
      return has.call(value, property);
    }
    module.exports = hasOwnProp;
  }
});

// node_modules/@stdlib/assert/has-own-property/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/@stdlib/assert/has-own-property/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main8();
    module.exports = main;
  }
});

// node_modules/@stdlib/symbol/ctor/lib/main.js
var require_main9 = __commonJS({
  "node_modules/@stdlib/symbol/ctor/lib/main.js"(exports, module) {
    "use strict";
    var Sym = typeof Symbol === "function" ? Symbol : void 0;
    module.exports = Sym;
  }
});

// node_modules/@stdlib/symbol/ctor/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/@stdlib/symbol/ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main9();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils/native-class/lib/tostringtag.js
var require_tostringtag = __commonJS({
  "node_modules/@stdlib/utils/native-class/lib/tostringtag.js"(exports, module) {
    "use strict";
    var Symbol2 = require_lib9();
    var toStrTag = typeof Symbol2 === "function" ? Symbol2.toStringTag : "";
    module.exports = toStrTag;
  }
});

// node_modules/@stdlib/utils/native-class/lib/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/@stdlib/utils/native-class/lib/polyfill.js"(exports, module) {
    "use strict";
    var hasOwnProp = require_lib8();
    var toStringTag = require_tostringtag();
    var toStr = require_tostring();
    function nativeClass(v) {
      var isOwn;
      var tag;
      var out;
      if (v === null || v === void 0) {
        return toStr.call(v);
      }
      tag = v[toStringTag];
      isOwn = hasOwnProp(v, toStringTag);
      try {
        v[toStringTag] = void 0;
      } catch (err) {
        return toStr.call(v);
      }
      out = toStr.call(v);
      if (isOwn) {
        v[toStringTag] = tag;
      } else {
        delete v[toStringTag];
      }
      return out;
    }
    module.exports = nativeClass;
  }
});

// node_modules/@stdlib/utils/native-class/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@stdlib/utils/native-class/lib/index.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var builtin = require_main7();
    var polyfill = require_polyfill2();
    var main;
    if (hasToStringTag()) {
      main = polyfill;
    } else {
      main = builtin;
    }
    module.exports = main;
  }
});

// node_modules/@stdlib/assert/is-string/lib/valueof.js
var require_valueof = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/valueof.js"(exports, module) {
    "use strict";
    var valueOf = String.prototype.valueOf;
    module.exports = valueOf;
  }
});

// node_modules/@stdlib/assert/is-string/lib/try2valueof.js
var require_try2valueof = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/try2valueof.js"(exports, module) {
    "use strict";
    var valueOf = require_valueof();
    function test(value) {
      try {
        valueOf.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/assert/is-string/lib/object.js
var require_object = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/object.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var nativeClass = require_lib10();
    var test = require_try2valueof();
    var FLG = hasToStringTag();
    function isString(value) {
      if (typeof value === "object") {
        if (value instanceof String) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object String]";
      }
      return false;
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert/is-string/lib/main.js
var require_main10 = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive();
    var isObject = require_object();
    function isString(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert/is-string/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@stdlib/assert/is-string/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main10();
    var isPrimitive = require_primitive();
    var isObject = require_object();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/primitive.js
var require_primitive2 = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/primitive.js"(exports, module) {
    "use strict";
    function isBoolean(value) {
      return typeof value === "boolean";
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/boolean/ctor/lib/main.js
var require_main11 = __commonJS({
  "node_modules/@stdlib/boolean/ctor/lib/main.js"(exports, module) {
    "use strict";
    var Bool = Boolean;
    module.exports = Bool;
  }
});

// node_modules/@stdlib/boolean/ctor/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@stdlib/boolean/ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main11();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/tostring.js
var require_tostring2 = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/tostring.js"(exports, module) {
    "use strict";
    var toString = Boolean.prototype.toString;
    module.exports = toString;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/try2serialize.js
var require_try2serialize = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/try2serialize.js"(exports, module) {
    "use strict";
    var toString = require_tostring2();
    function test(value) {
      try {
        toString.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/object.js
var require_object2 = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/object.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var nativeClass = require_lib10();
    var Boolean2 = require_lib12();
    var test = require_try2serialize();
    var FLG = hasToStringTag();
    function isBoolean(value) {
      if (typeof value === "object") {
        if (value instanceof Boolean2) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object Boolean]";
      }
      return false;
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/main.js
var require_main12 = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    function isBoolean(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert/is-boolean/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@stdlib/assert/is-boolean/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main12();
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/nlp/tokenize/lib/abbreviations.json
var require_abbreviations = __commonJS({
  "node_modules/@stdlib/nlp/tokenize/lib/abbreviations.json"(exports, module) {
    module.exports = {
      "i.e.": ["i.e."],
      "I.e.": ["I.e."],
      "I.E.": ["I.E."],
      "e.g.": ["e.g."],
      "E.g.": ["E.g."],
      "E.G.": ["E.G."],
      "et al.": ["et al."],
      "etc.": ["etc."],
      "vs.": ["vs."],
      "A.S.A.P": ["A.S.A.P"],
      "E.T.A.": ["E.T.A."],
      "D.I.Y": ["D.I.Y"],
      "R.S.V.P": ["R.S.V.P"],
      "P.S.": ["P.S."],
      "B.Y.O.B": ["B.Y.O.B"],
      "Ms.": ["Ms."],
      "Mr.": ["Mr."],
      "Dr.": ["Dr."],
      "Prof.": ["Prof."],
      "Mrs.": ["Mrs."],
      "Messrs.": ["Messrs."],
      "Gov.": ["Gov."],
      "Gen.": ["Gen."],
      "Lt.": ["Lt."],
      "Col.": ["Col."],
      "Mt.": ["Mt."],
      "Bros.": ["Bros."],
      "Corp.": ["Corp."],
      "Co.": ["Co."],
      "co.": ["co."],
      "Inc.": ["Inc."],
      "Ltd.": ["Ltd."],
      "Rep.": ["Rep."],
      "Sen.": ["Sen."],
      "Jr.": ["Jr."],
      "Sr.": ["Sr."],
      "Ph.D.": ["Ph.D."],
      "J.D.": ["J.D."],
      "M.D.": ["M.D."],
      "Rev.": ["Rev."],
      "Adm.": ["Adm."],
      "St.": ["St."],
      "a.m.": ["a.m."],
      "p.m.": ["p.m."],
      "b.c.": ["b.c."],
      "B.C.": ["B.C."],
      "a.d.": ["a.d."],
      "A.D.": ["A.D."],
      "b.c.e.": ["b.c.e."],
      "B.C.E.": ["B.C.E."],
      "Jan.": ["Jan."],
      "Feb.": ["Feb."],
      "Mar.": ["Mar."],
      "Apr.": ["Apr."],
      "May.": ["May."],
      "Jun.": ["Jun."],
      "Jul.": ["Jul."],
      "Aug.": ["Aug."],
      "Sep.": ["Sep."],
      "Sept.": ["Sept."],
      "Oct.": ["Oct."],
      "Nov.": ["Nov."],
      "Dec.": ["Dec."],
      "Ala.": ["Ala."],
      "Ariz.": ["Ariz."],
      "Ark.": ["Ark."],
      "Calif.": ["Calif."],
      "Colo.": ["Colo."],
      "Conn.": ["Conn."],
      "Del.": ["Del."],
      "D.C.": ["D.C."],
      "Fla.": ["Fla."],
      "Ga.": ["Ga."],
      "Ill.": ["Ill."],
      "Ind.": ["Ind."],
      "Kans.": ["Kans."],
      "Kan.": ["Kan."],
      "Ky.": ["Ky."],
      "La.": ["La."],
      "Md.": ["Md."],
      "Mass.": ["Mass."],
      "Mich.": ["Mich."],
      "Minn.": ["Minn."],
      "Miss.": ["Miss."],
      "Mo.": ["Mo."],
      "Mont.": ["Mont."],
      "Nebr.": ["Nebr."],
      "Neb.": ["Neb."],
      "Nev.": ["Nev."],
      "N.H.": ["N.H."],
      "N.J.": ["N.J."],
      "N.M.": ["N.M."],
      "N.Y.": ["N.Y."],
      "N.C.": ["N.C."],
      "N.D.": ["N.D."],
      "Okla.": ["Okla."],
      "Ore.": ["Ore."],
      "Pa.": ["Pa."],
      "Tenn.": ["Tenn."],
      "Va.": ["Va."],
      "Wash.": ["Wash."],
      "Wis.": ["Wis."]
    };
  }
});

// node_modules/@stdlib/nlp/tokenize/lib/emojis.json
var require_emojis = __commonJS({
  "node_modules/@stdlib/nlp/tokenize/lib/emojis.json"(exports, module) {
    module.exports = {
      "^_^": ["^_^"],
      "=D": ["=D"],
      ";-p": [";-p"],
      ":O": [":O"],
      ":-/": [":-/"],
      xD: ["xD"],
      V_V: ["V_V"],
      ";(": [";("],
      "(:": ["(:"],
      '")': ['")'],
      ":Y": [":Y"],
      ":]": [":]"],
      ":3": [":3"],
      ":(": [":("],
      ":-)": [":-)"],
      "=3": ["=3"],
      ":))": [":))"],
      ":>": [":>"],
      ";p": [";p"],
      ":p": [":p"],
      "=[[": ["=[["],
      xDD: ["xDD"],
      "<333": ["<333"],
      "<33": ["<33"],
      ":P": [":P"],
      "o.O": ["o.O"],
      "<3": ["<3"],
      ";-)": [";-)"],
      ":)": [":)"],
      "-_-": ["-_-"],
      ":')": [":')"],
      o_O: ["o_O"],
      ";)": [";)"],
      "=]": ["=]"],
      "(=": ["(="],
      "-__-": ["-__-"],
      ":/": [":/"],
      ":0": [":0"],
      "(^_^)": ["(^_^)"],
      ";D": [";D"],
      o_o: ["o_o"],
      ":((": [":(("],
      "=)": ["=)"]
    };
  }
});

// node_modules/@stdlib/nlp/tokenize/lib/contractions.json
var require_contractions = __commonJS({
  "node_modules/@stdlib/nlp/tokenize/lib/contractions.json"(exports, module) {
    module.exports = {
      "'s": ["'s"],
      "'S": ["'S"],
      "ain't": ["ai", "n't"],
      aint: ["ai", "nt"],
      "Ain't": ["Ai", "n't"],
      "aren't": ["are", "n't"],
      arent: ["are", "nt"],
      "Aren't": ["Are", "n't"],
      "can't": ["ca", "n't"],
      cant: ["ca", "nt"],
      "Can't": ["Ca", "n't"],
      "can't've": ["ca", "n't", "'ve"],
      "'cause": ["'cause'"],
      cannot: ["can", "not"],
      Cannot: ["Can", "not"],
      "could've": ["could", "'ve"],
      couldve: ["could", "ve"],
      "Could've": ["Could", "'ve"],
      "couldn't": ["could", "n't"],
      couldnt: ["could", "nt"],
      "Couldn't": ["Could", "n't"],
      "couldn't've": ["could", "n't", "'ve"],
      couldntve: ["could", "nt", "ve"],
      "Couldn't've": ["Could", "n't", "'ve"],
      "didn't": ["did", "n't"],
      didnt: ["did", "nt"],
      "Didn't": ["Did", "n't"],
      "doesn't": ["does", "n't"],
      doesnt: ["does", "nt"],
      "Doesn't": ["Does", "n't"],
      "don't": ["do", "n't"],
      dont: ["do", "nt"],
      "Don't": ["Do", "n't"],
      "hadn't": ["had", "n't"],
      hadnt: ["had", "nt"],
      "Hadn't": ["Had", "n't"],
      "hadn't've": ["had", "n't", "'ve"],
      "hasn't": ["has", "n't"],
      hasnt: ["has", "nt"],
      "haven't": ["have", "n't"],
      havent: ["have", "nt"],
      "he'd": ["he", "'d"],
      hed: ["he", "d"],
      "he'd've": ["he", "'d", "'ve"],
      hedve: ["he", "d", "ve"],
      "he'll": ["he", "'ll"],
      "he'll've": ["he", "'ll", "'ve"],
      "he's": ["he", "'s"],
      hes: ["he", "s"],
      "how'd": ["how", "'d"],
      howd: ["how", "d"],
      "how'd'y": ["how", "'d", "'y"],
      "how'll": ["how", "'ll"],
      howll: ["how", "ll"],
      "how's": ["how", "'s"],
      hows: ["how", "s"],
      "I'd": ["I", "'d"],
      "I'd've": ["I", "'d", "'ve"],
      "I'll": ["I", "'ll"],
      "i'll": ["i", "'ll"],
      "I'll've": ["I", "'ll", "'ve"],
      "i'll've": ["i", "'ll", "'ve"],
      "I'm": ["I", "'m"],
      "i'm": ["i", "'m"],
      Im: ["I", "m"],
      im: ["i", "m"],
      "I'ma": ["I", "'ma"],
      "i'ma": ["i", "'ma"],
      "I've": ["I", "'ve"],
      "i've": ["i", "'ve"],
      "isn't": ["is", "n't"],
      isnt: ["is", "nt"],
      "Isn't": ["Is", "n't"],
      "It'd": ["It", "'d"],
      "it'd": ["it", "'d"],
      "it'd've": ["it", "'d", "'ve"],
      "it'll've": ["it", "'ll", "'ve"],
      "it'll": ["it", "'ll"],
      itll: ["it", "ll"],
      "it's": ["it", "'s"],
      "let's": ["let", "'s"],
      lets: ["let", "s"],
      "ma'am": ["ma'am"],
      "mayn't": ["may", "n't"],
      "mightn't": ["might", "n't"],
      "mightn't've": ["might", "n't", "'ve"],
      "might've": ["might", "'ve"],
      "mustn't": ["must", "n't"],
      "mustn't've": ["must", "n't", "'ve"],
      "must've": ["must", "'ve"],
      "needn't": ["need", "n't"],
      "needn't've": ["need", "n't", "'ve"],
      "not've": ["not", "'ve"],
      "o'clock": ["o'clock"],
      "oughtn't": ["ought", "n't"],
      "oughtn't've": ["ought", "n't", "'ve"],
      "so've": ["so", "'ve"],
      "so's": ["so", "'s"],
      "shan't": ["sha", "n't"],
      "sha'n't": ["sha'", "n't"],
      "shan't've": ["sha", "n't", "'ve"],
      "she'd": ["she", "'d"],
      "she'd've": ["she", "'d", "'ve"],
      "she'll": ["she", "'ll"],
      "she'll've": ["she", "'ll", "'ve"],
      "she's": ["she", "'s"],
      "should've": ["should", "'ve"],
      "shouldn't": ["should", "n't"],
      "shouldn't've": ["should", "n't", "'ve"],
      "that'd": ["that", "'d"],
      "that'd've": ["that", "'d", "'ve"],
      "that's": ["that", "'s"],
      thats: ["that", "s"],
      "there'd": ["there", "'d"],
      "there'd've": ["there", "'d", "'ve"],
      "there's": ["there", "'s"],
      "they'd": ["they", "'d"],
      "They'd": ["They", "'d"],
      "they'd've": ["they", "'d", "'ve"],
      "They'd've": ["They", "'d", "'ve"],
      "they'll": ["they", "'ll"],
      "They'll": ["They", "'ll"],
      "they'll've": ["they", "'ll", "'ve"],
      "They'll've": ["They", "'ll", "'ve"],
      "they're": ["they", "'re"],
      "They're": ["They", "'re"],
      "they've": ["they", "'ve"],
      "They've": ["They", "'ve"],
      "to've": ["to", "'ve"],
      "wasn't": ["was", "n't"],
      "we'd": ["we", "'d"],
      "We'd": ["We", "'d"],
      "we'd've": ["we", "'d", "'ve"],
      "we'll": ["we", "'ll"],
      "We'll": ["We", "'ll"],
      "we'll've": ["we", "'ll", "'ve"],
      "We'll've": ["We", "'ll", "'ve"],
      "we're": ["we", "'re"],
      "We're": ["We", "'re"],
      "we've": ["we", "'ve"],
      "We've": ["We", "'ve"],
      "weren't": ["were", "n't"],
      "what'll": ["what", "'ll"],
      "what'll've": ["what", "'ll", "'ve"],
      "what're": ["what", "'re"],
      "what's": ["what", "'s"],
      "what've": ["what", "'ve"],
      "when's": ["when", "'s"],
      "when've": ["when", "'ve"],
      "where'd": ["where", "'d"],
      "where's": ["where", "'s"],
      "where've": ["where", "'ve"],
      "who'd": ["who", "'d"],
      "who'll": ["who", "'ll"],
      "who'll've": ["who", "'ll'", "'ve'"],
      "who're": ["who", "'re"],
      "who's": ["who", "'s"],
      "who've": ["who", "'ve"],
      "why've": ["why", "'ve"],
      "why'll": ["why", "'ll"],
      "why're": ["why", "'re"],
      "why's": ["why", "'s"],
      "will've": ["will", "'ve"],
      "won't": ["wo", "n't"],
      wont: ["wo", "nt"],
      "won't've": ["wo", "n't", "'ve"],
      "would've": ["would", "'ve"],
      "wouldn't": ["would", "n't"],
      "wouldn't've": ["would", "n't", "'ve"],
      "y'all": ["y'", "all"],
      "y'all'd": ["y'", "all", "'d"],
      "y'all'd've": ["y'", "all", "'d", "'ve"],
      "y'all're": ["y'", "all", "'re'"],
      "y'all've": ["y'", "all", "ve"],
      "you'd": ["you", "'d"],
      "You'd": ["You", "'d"],
      "you'd've": ["you", "'d", "'ve"],
      "You'd've": ["You", "'d", "'ve"],
      "you'll": ["you", "'ll"],
      "You'll": ["You", "'ll"],
      "you'll've": ["you", "'ll", "'ve"],
      "You'll've": ["You", "'ll", "'ve"],
      "you're": ["you", "'re"],
      "You're": ["You", "'re"],
      "you've": ["you", "'ve"],
      "You've": ["You", "'ve"]
    };
  }
});

// node_modules/@stdlib/nlp/tokenize/lib/main.js
var require_main13 = __commonJS({
  "node_modules/@stdlib/nlp/tokenize/lib/main.js"(exports, module) {
    "use strict";
    var isBoolean = require_lib13().isPrimitive;
    var isString = require_lib11().isPrimitive;
    var hasOwnProp = require_lib8();
    var format = require_lib3();
    var ABBRS = require_abbreviations();
    var EMOJIS = require_emojis();
    var CONTRACT = require_contractions();
    var REGEXP_PREFIXES = /^([,([{*<"“'`‘]|\.{1,3})/gi;
    var REGEXP_SUFFIXES = /([,.!?%*>:;"'”`)\]}]|\.\.\.)$/gi;
    function extend(arr, ext) {
      var i;
      for (i = 0; i < ext.length; i++) {
        arr.push(ext[i]);
      }
      return arr;
    }
    function tokenizeSubstring(substr) {
      var prefixes = [];
      var suffixes = [];
      var match;
      var done;
      var res;
      do {
        if (!EMOJIS[substr] && !ABBRS[substr] && !CONTRACT[substr]) {
          match = substr.split(REGEXP_PREFIXES);
          if (match.length > 1) {
            prefixes.push(match[1]);
            substr = match[2];
          } else {
            match = substr.split(REGEXP_SUFFIXES);
            if (match.length > 1) {
              substr = match[0];
              suffixes.unshift(match[1]);
            } else {
              done = true;
            }
          }
        } else {
          done = true;
        }
      } while (!done);
      res = prefixes;
      if (substr) {
        res.push(substr);
      }
      if (suffixes[suffixes.length - 1] === "...") {
        suffixes.pop();
        suffixes.unshift("...");
      }
      extend(res, suffixes);
      return res;
    }
    function tokenize(str, keepWhitespace) {
      var subtkns;
      var substrs;
      var tokens;
      var substr;
      var cache;
      var i;
      if (!isString(str)) {
        throw new TypeError(format("invalid argument. First argument must be a string. Value: `%s`.", str));
      }
      if (arguments.length > 1) {
        if (!isBoolean(keepWhitespace)) {
          throw new TypeError(format("invalid argument. Second argument must be a boolean. Value: `%s`.", keepWhitespace));
        }
      }
      if (!str) {
        return [];
      }
      if (keepWhitespace) {
        substrs = str.split(/(\s+)/);
      } else {
        substrs = str.split(/\s+/);
      }
      cache = {};
      tokens = [];
      for (i = 0; i < substrs.length; i++) {
        substr = substrs[i];
        if (hasOwnProp(cache, substr)) {
          extend(tokens, cache[substr]);
        } else {
          subtkns = tokenizeSubstring(substr);
          extend(tokens, subtkns);
          cache[substr] = subtkns;
        }
      }
      return tokens;
    }
    module.exports = tokenize;
  }
});

// node_modules/@stdlib/nlp/tokenize/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@stdlib/nlp/tokenize/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main13();
    module.exports = main;
  }
});

// node_modules/@stdlib/string/base/trim/lib/has_builtin.js
var require_has_builtin = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/has_builtin.js"(exports, module) {
    "use strict";
    var bool = typeof String.prototype.trim !== "undefined";
    module.exports = bool;
  }
});

// node_modules/@stdlib/string/base/trim/lib/builtin.js
var require_builtin2 = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/builtin.js"(exports, module) {
    "use strict";
    var trim = String.prototype.trim;
    module.exports = trim;
  }
});

// node_modules/@stdlib/string/base/trim/lib/check.js
var require_check = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/check.js"(exports, module) {
    "use strict";
    var trim = require_builtin2();
    var str1 = " \n	\r\n\f\v            \u2028\u2029  　\uFEFF";
    var str2 = "᠎";
    function test() {
      return trim.call(str1) === "" && trim.call(str2) === str2;
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/string/base/replace/lib/main.js
var require_main14 = __commonJS({
  "node_modules/@stdlib/string/base/replace/lib/main.js"(exports, module) {
    "use strict";
    function replace(str, search, newval) {
      return str.replace(search, newval);
    }
    module.exports = replace;
  }
});

// node_modules/@stdlib/string/base/replace/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@stdlib/string/base/replace/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main14();
    module.exports = main;
  }
});

// node_modules/@stdlib/string/base/trim/lib/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/polyfill.js"(exports, module) {
    "use strict";
    var replace = require_lib15();
    var RE = /^[\u0020\f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]*([\S\s]*?)[\u0020\f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]*$/;
    function trim(str) {
      return replace(str, RE, "$1");
    }
    module.exports = trim;
  }
});

// node_modules/@stdlib/string/base/trim/lib/main.js
var require_main15 = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/main.js"(exports, module) {
    "use strict";
    var builtin = require_builtin2();
    function trim(str) {
      return builtin.call(str);
    }
    module.exports = trim;
  }
});

// node_modules/@stdlib/string/base/trim/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@stdlib/string/base/trim/lib/index.js"(exports, module) {
    "use strict";
    var HAS_BUILTIN = require_has_builtin();
    var check = require_check();
    var polyfill = require_polyfill3();
    var main = require_main15();
    var trim;
    if (HAS_BUILTIN && check()) {
      trim = main;
    } else {
      trim = polyfill;
    }
    module.exports = trim;
  }
});

// node_modules/@stdlib/nlp/sentencize/lib/main.js
var require_main16 = __commonJS({
  "node_modules/@stdlib/nlp/sentencize/lib/main.js"(exports, module) {
    "use strict";
    var isString = require_lib11().isPrimitive;
    var tokenize = require_lib14();
    var trim = require_lib16();
    var RE_CAPITALIZED = /^[A-Z][a-z]{0,4}$/;
    var RE_CAPITALIZED_PERIOD = /^([A-Z]\.)*[A-Z]$/;
    var RE_NUMBER = /^[0-9]$/;
    var RE_PREFIXES = /^[{[(<:;"'”`]/;
    var RE_SUFFIXES = /[})\]>:;"'”`]$/;
    function isEndOfSentence(tokens, i) {
      var token;
      var im1 = i - 1;
      var ip1 = i + 1;
      token = tokens[i];
      if (token === "." && !RE_CAPITALIZED.test(tokens[im1]) && // for other short abbreviations and bullet points
      !RE_CAPITALIZED_PERIOD.test(tokens[im1]) && // acronyms of the form A.B.C.
      !RE_NUMBER.test(tokens[im1]) && // numbered list items
      !RE_PREFIXES.test(tokens[im1]) && !RE_SUFFIXES.test(tokens[ip1])) {
        return true;
      }
      if ((token === "!" || token === "?") && !RE_PREFIXES.test(tokens[im1]) && !RE_SUFFIXES.test(tokens[ip1])) {
        return true;
      }
      if (RE_SUFFIXES.test(token) && (tokens[im1] === "." || tokens[im1] === "!" || tokens[im1] === "?")) {
        return true;
      }
      return false;
    }
    function sentencize(str) {
      var current;
      var tokens;
      var out;
      var i;
      if (!isString(str)) {
        throw new TypeError("invalid argument. Must provide a string. Value: `" + str + "`.");
      }
      tokens = tokenize(str, true);
      current = "";
      out = [];
      for (i = 0; i < tokens.length; i++) {
        current += tokens[i];
        if (isEndOfSentence(tokens, i)) {
          out.push(trim(current));
          current = "";
        }
      }
      if (current !== "") {
        out.push(trim(current));
      }
      return out;
    }
    module.exports = sentencize;
  }
});

// node_modules/@stdlib/nlp/sentencize/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/@stdlib/nlp/sentencize/lib/index.js"(exports, module) {
    var main = require_main16();
    module.exports = main;
  }
});
export default require_lib17();
/*! Bundled license information:

@stdlib/utils/define-property/lib/define_property.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-property/lib/has_define_property_support.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-property/lib/builtin.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/is_number.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/zero_pad.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/format_integer.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/is_string.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/format_double.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/space_pad.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-interpolate/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-tokenize/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/format-tokenize/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/format/lib/is_string.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/format/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/format/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-property/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-nonenumerable-read-only-property/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/define-nonenumerable-read-only-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-symbol-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-symbol-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-tostringtag-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-tostringtag-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/native-class/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/native-class/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-own-property/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/has-own-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol/ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol/ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/native-class/lib/tostringtag.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/native-class/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils/native-class/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/valueof.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/try2valueof.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-string/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/boolean/ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/boolean/ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/try2serialize.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert/is-boolean/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/nlp/tokenize/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/nlp/tokenize/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/has_builtin.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/builtin.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/check.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/replace/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/replace/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string/base/trim/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/nlp/sentencize/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2023 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/nlp/sentencize/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2023 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
*/
//# sourceMappingURL=@stdlib_nlp_sentencize.js.map
